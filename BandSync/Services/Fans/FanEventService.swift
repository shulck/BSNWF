//
//  FanEventService.swift
//  BandSync
//
//  Created by Claude on 28.07.2025.
//

import Foundation
import FirebaseFirestore
import Combine

final class FanEventService: ObservableObject {
    static let shared = FanEventService()
    
    @Published var fanEvents: [Event] = []
    @Published var isLoading = false
    @Published var errorMessage: String?
    
    private let db = Firestore.firestore()
    private var listener: ListenerRegistration?
    
    private init() {}
    
    // MARK: - Public Methods
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ñ–∞–Ω–∞—Ç–æ–≤ (–∫–æ–Ω—Ü–µ—Ä—Ç—ã, —Ñ–µ—Å—Ç–∏–≤–∞–ª–∏, –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è)
    func loadPublicEvents(for groupId: String) {
        guard !groupId.isEmpty else {
            print("‚ùå FanEventService: Empty groupId")
            return
        }
        
        // ‚úÖ –ó–ê–©–ò–¢–ê –û–¢ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –í–´–ó–û–í–û–í
        guard !isLoading else {
            print("üîÑ FanEventService: Already loading, skipping duplicate request")
            return
        }
        
        print("üîÑ FanEventService: Loading public events for group: \(groupId)")
        
        isLoading = true
        errorMessage = nil
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π listener –µ—Å–ª–∏ –µ—Å—Ç—å
        listener?.remove()
        
        // –°–æ–∑–¥–∞–µ–º listener –¥–ª—è —Å–æ–±—ã—Ç–∏–π –≥—Ä—É–ø–ø—ã - –£–ü–†–û–©–ï–ù–ù–´–ô –ó–ê–ü–†–û–°
        listener = db.collection("events")
            .whereField("groupId", isEqualTo: groupId)
            .addSnapshotListener { [weak self] snapshot, error in
                DispatchQueue.main.async {
                    self?.handleEventsSnapshot(snapshot, error: error)
                }
            }
    }
    
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Å–æ–±—ã—Ç–∏–π
    func stopLoading() {
        listener?.remove()
        listener = nil
        fanEvents = []
    }
    
    // MARK: - Private Methods
    
    private func handleEventsSnapshot(_ snapshot: QuerySnapshot?, error: Error?) {
        isLoading = false
        
        if let error = error {
            print("‚ùå FanEventService: Error loading events: \(error.localizedDescription)")
            errorMessage = "Failed to load events: \(error.localizedDescription)"
            return
        }
        
        guard let snapshot = snapshot else {
            print("‚ùå FanEventService: No snapshot received")
            errorMessage = "No events data received"
            return
        }
        
        // –ü–∞—Ä—Å–∏–º —Å–æ–±—ã—Ç–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–ª—è —Ñ–∞–Ω–∞—Ç–æ–≤
        let allEvents = snapshot.documents.compactMap { document -> Event? in
            do {
                return try document.data(as: Event.self)
            } catch {
                print("‚ùå FanEventService: Error parsing event \(document.documentID): \(error)")
                return nil
            }
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ñ–∞–Ω–∞—Ç–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        let publicEvents = allEvents.filter { event in
            isEventVisibleToFans(event)
        }.sorted { $0.date < $1.date } // ‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        
        print("‚úÖ FanEventService: Loaded \(publicEvents.count) public events (from \(allEvents.count) total)")
        
        fanEvents = publicEvents
        errorMessage = nil
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–Ω–æ –ª–∏ —Å–æ–±—ã—Ç–∏–µ –±—ã—Ç—å –≤–∏–¥–∏–º–æ —Ñ–∞–Ω–∞—Ç–∞–º
    private func isEventVisibleToFans(_ event: Event) -> Bool {
        // 1. –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ù–ï –≤–∏–¥–Ω—ã —Ñ–∞–Ω–∞—Ç–∞–º
        if event.isPersonal {
            return false
        }
        
        // 2. –¢–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –≤–∏–¥–Ω—ã —Ñ–∞–Ω–∞—Ç–∞–º
        let fanVisibleTypes: [EventType] = [.concert, .festival, .birthday]
        
        return fanVisibleTypes.contains(event.type)
    }
    
    // MARK: - Helper Methods
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
    func getEvents(for date: Date) -> [Event] {
        let calendar = Calendar.current
        return fanEvents.filter { event in
            calendar.isDate(event.date, inSameDayAs: date)
        }
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞—Ç—ã —Å —Å–æ–±—ã—Ç–∏—è–º–∏
    func getDatesWithEvents() -> Set<Date> {
        let calendar = Calendar.current
        return Set(fanEvents.map { event in
            calendar.startOfDay(for: event.date)
        })
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ ID
    func getEvent(by id: String) -> Event? {
        return fanEvents.first { $0.id == id }
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∞—Ç—ã
    func getEventCount(for date: Date) -> Int {
        return getEvents(for: date).count
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è (—Å–ª–µ–¥—É—é—â–∏–µ 30 –¥–Ω–µ–π)
    func getUpcomingEvents(limit: Int = 10) -> [Event] {
        let now = Date()
        let futureEvents = fanEvents.filter { $0.date >= now }
        return Array(futureEvents.prefix(limit))
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è
    func getPastEvents(limit: Int = 10) -> [Event] {
        let now = Date()
        let pastEvents = fanEvents.filter { $0.date < now }.reversed()
        return Array(pastEvents.prefix(limit))
    }
    
    deinit {
        listener?.remove()
    }
}

// MARK: - Extensions for Fan-specific Logic

extension FanEventService {
    
    /// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∞–Ω–∞—Ç–∞–º (—Å–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
    func formatEventForFans(_ event: Event) -> Event {
        var fanEvent = event
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤
        fanEvent.organizerEmail = nil
        fanEvent.organizerPhone = nil
        fanEvent.coordinatorEmail = nil
        fanEvent.coordinatorPhone = nil
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª—è—Ö
        fanEvent.hotelName = nil
        fanEvent.hotelAddress = nil
        fanEvent.hotelCheckIn = nil
        fanEvent.hotelCheckOut = nil
        fanEvent.hotelBreakfastIncluded = nil
        
        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï —Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∞–Ω–∞—Ç–æ–≤
        // –§–∞–Ω–∞—Ç—ã –î–û–õ–ñ–ù–´ –≤–∏–¥–µ—Ç—å:
        // - fanEvent.isPaidEvent (–ø–ª–∞—Ç–Ω–æ–µ –ª–∏ —Å–æ–±—ã—Ç–∏–µ)
        // - fanEvent.ticketPurchaseUrl (—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –±–∏–ª–µ—Ç–æ–≤)
        
        // ‚ùå –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≥—Ä—É–ø–ø—ã:
        fanEvent.fee = nil        // –ì–æ–Ω–æ—Ä–∞—Ä –≥—Ä—É–ø–ø—ã - –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        fanEvent.currency = nil   // –í–∞–ª—é—Ç–∞ –≥–æ–Ω–æ—Ä–∞—Ä–∞ - –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
        fanEvent.notes = nil
        
        return fanEvent
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —Ñ–∞–Ω–∞—Ç –≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
    func canFanViewEventDetails(_ event: Event) -> Bool {
        return isEventVisibleToFans(event)
    }
}
