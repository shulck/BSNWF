//
//  FanAchievementService.swift
//  BandSyncApp
//
//  Created by Oleksandr Kuziakin on 31.07.2025.
//


//
//  FanAchievementService.swift
//  BandSync
//
//  Created by Claude on 31.07.2025.
//

import Foundation
import FirebaseFirestore
import Combine

final class FanAchievementService: ObservableObject {
    static let shared = FanAchievementService()
    
    @Published var fanAchievements: [String: Bool] = [:] // achievementId -> isUnlocked
    @Published var recentlyUnlocked: [Achievement] = []
    @Published var totalPoints: Int = 0
    
    private let db = Firestore.firestore()
    private var listener: ListenerRegistration?
    
    private init() {}
    
    // MARK: - Public Methods
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–Ω–∞—Ç–∞
    func loadFanAchievements(fanId: String, groupId: String) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π listener
        listener?.remove()
        
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        listener = db.collection("groups").document(groupId)
            .collection("fanAchievements")
            .whereField("fanId", isEqualTo: fanId)
            .addSnapshotListener { [weak self] snapshot, error in
                if let error = error {
                    print("‚ùå Error loading fan achievements: \(error)")
                    return
                }
                
                self?.processFanAchievements(snapshot?.documents ?? [])
            }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∞–Ω–∞—Ç–∞
    func checkAndUnlockAchievements(for fanId: String, groupId: String, stats: FanStats, fanProfile: FanProfile) {
        let batch = db.batch()
        var newlyUnlocked: [Achievement] = []
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for achievement in Achievement.defaults {
            let achievementRef = db.collection("groups").document(groupId)
                .collection("fanAchievements")
                .document("\(fanId)_\(achievement.id)")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            if shouldUnlockAchievement(achievement, stats: stats, fanProfile: fanProfile) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ
                if fanAchievements[achievement.id] != true {
                    let achievementData: [String: Any] = [
                        "fanId": fanId,
                        "achievementId": achievement.id,
                        "isUnlocked": true,
                        "unlockedDate": Timestamp(date: Date()),
                        "progress": 1.0,
                        "points": achievement.points
                    ]
                    
                    batch.setData(achievementData, forDocument: achievementRef, merge: true)
                    newlyUnlocked.append(achievement)
                    
                    print("üèÜ New achievement unlocked: \(achievement.title)")
                }
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –Ω–µ–¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã—Ö —Ü–µ–ª–µ–π
                let progress = calculateProgress(for: achievement, stats: stats, fanProfile: fanProfile)
                let achievementData: [String: Any] = [
                    "fanId": fanId,
                    "achievementId": achievement.id,
                    "isUnlocked": false,
                    "progress": progress,
                    "points": 0
                ]
                
                batch.setData(achievementData, forDocument: achievementRef, merge: true)
            }
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        batch.commit { [weak self] error in
            if let error = error {
                print("‚ùå Error updating achievements: \(error)")
                return
            }
            
            DispatchQueue.main.async {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫ —Å–ø–∏—Å–∫—É –Ω–µ–¥–∞–≤–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                self?.recentlyUnlocked.append(contentsOf: newlyUnlocked)
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
                for achievement in newlyUnlocked {
                    self?.showAchievementNotification(achievement)
                }
            }
        }
    }
    
    /// –û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    func clearRecentlyUnlocked() {
        recentlyUnlocked.removeAll()
    }
    
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    func stopMonitoring() {
        listener?.remove()
        listener = nil
    }
    
    // MARK: - Private Methods
    
    private func processFanAchievements(_ documents: [QueryDocumentSnapshot]) {
        var achievements: [String: Bool] = [:]
        var points = 0
        
        for doc in documents {
            let data = doc.data()
            if let achievementId = data["achievementId"] as? String,
               let isUnlocked = data["isUnlocked"] as? Bool {
                achievements[achievementId] = isUnlocked
                
                if isUnlocked, let achievementPoints = data["points"] as? Int {
                    points += achievementPoints
                }
            }
        }
        
        DispatchQueue.main.async {
            self.fanAchievements = achievements
            self.totalPoints = points
        }
    }
    
    private func shouldUnlockAchievement(_ achievement: Achievement, stats: FanStats, fanProfile: FanProfile) -> Bool {
        let requirements = achievement.requirements
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ü–µ—Ä—Ç—ã
        if let requiredConcerts = requirements.concertsAttended {
            if stats.concertsAttended < requiredConcerts {
                return false
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if let requiredDays = requirements.daysSinceJoining {
            if fanProfile.daysSinceJoining < requiredDays {
                return false
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        if let requiredMessages = requirements.messagesCount {
            if stats.totalMessages < requiredMessages {
                return false
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—É–ø–∫–∏ –º–µ—Ä—á–∞
        if let requiredPurchases = requirements.merchPurchases {
            if stats.merchandisePurchased < requiredPurchases {
                return false
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º "—Å—Ä–µ–¥–∏ –ø–µ—Ä–≤—ã—Ö" (—ç—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
        if requirements.isAmongFirst != nil {
            // –≠—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            return fanAchievements[achievement.id] == true
        }
        
        return true
    }
    
    private func calculateProgress(for achievement: Achievement, stats: FanStats, fanProfile: FanProfile) -> Double {
        let requirements = achievement.requirements
        
        if let requiredConcerts = requirements.concertsAttended {
            return min(1.0, Double(stats.concertsAttended) / Double(requiredConcerts))
        }
        
        if let requiredDays = requirements.daysSinceJoining {
            return min(1.0, Double(fanProfile.daysSinceJoining) / Double(requiredDays))
        }
        
        if let requiredMessages = requirements.messagesCount {
            return min(1.0, Double(stats.totalMessages) / Double(requiredMessages))
        }
        
        if let requiredPurchases = requirements.merchPurchases {
            return min(1.0, Double(stats.merchandisePurchased) / Double(requiredPurchases))
        }
        
        return 0.0
    }
    
    private func showAchievementNotification(_ achievement: Achievement) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤ UI
        print("üéâ Achievement Unlocked: \(achievement.title) - \(achievement.description)")
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å HapticFeedback
        let impactFeedback = UIImpactFeedbackGenerator(style: .medium)
        impactFeedback.impactOccurred()
    }
}

// MARK: - Convenience Methods
extension FanAchievementService {
    
    /// –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    func getAchievementProgress(achievementId: String, stats: FanStats, fanProfile: FanProfile) -> Double {
        guard let achievement = Achievement.defaults.first(where: { $0.id == achievementId }) else {
            return 0.0
        }
        
        if fanAchievements[achievementId] == true {
            return 1.0
        }
        
        return calculateProgress(for: achievement, stats: stats, fanProfile: fanProfile)
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    func isAchievementUnlocked(_ achievementId: String) -> Bool {
        return fanAchievements[achievementId] == true
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º
    func getAllAchievementsWithStatus(stats: FanStats, fanProfile: FanProfile) -> [(achievement: Achievement, isUnlocked: Bool, progress: Double)] {
        return Achievement.defaults.map { achievement in
            let isUnlocked = fanAchievements[achievement.id] == true
            let progress = isUnlocked ? 1.0 : calculateProgress(for: achievement, stats: stats, fanProfile: fanProfile)
            return (achievement, isUnlocked, progress)
        }
    }
}
